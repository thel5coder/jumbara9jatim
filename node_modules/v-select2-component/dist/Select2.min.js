var Select2 = (function (exports,$) {
  'use strict';

  $ = $ && $.hasOwnProperty('default') ? $['default'] : $;

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  (function () {
    if (typeof document !== 'undefined') {
      var head = document.head || document.getElementsByTagName('head')[0],
          style = document.createElement('style'),
          css = "";style.type = 'text/css';if (style.styleSheet) {
        style.styleSheet.cssText = css;
      } else {
        style.appendChild(document.createTextNode(css));
      }head.appendChild(style);
    }
  })();

  var component = { render: function render() {
      var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', [_c('select', { staticClass: "form-control", attrs: { "id": _vm.id, "name": _vm.name, "placeholder": _vm.placeholder, "disabled": _vm.disabled } })]);
    }, staticRenderFns: [],
    name: 'Select2',
    data: function data() {
      return {
        select2: null
      };
    },

    model: {
      event: 'change',
      prop: 'value'
    },
    props: {
      id: {
        type: String,
        default: ''
      },
      name: {
        type: String,
        default: ''
      },
      placeholder: {
        type: String,
        default: ''
      },
      options: {
        type: Array,
        default: function _default() {
          return [];
        }
      },
      disabled: {
        type: Boolean,
        default: false
      },
      settings: {
        type: Object,
        default: function _default() {}
      },
      value: null
    },
    watch: {
      options: function options(val) {
        this.setOption(val);
      },
      value: function value(val) {
        this.setValue(val);
      }
    },
    methods: {
      setOption: function setOption() {
        var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

        this.select2.empty();
        this.select2.select2(_extends({}, this.settings, {
          data: val
        }));
        this.setValue(this.value);
      },
      setValue: function setValue(val) {
        if (val instanceof Array) {
          this.select2.val([].concat(_toConsumableArray(val)));
        } else {
          this.select2.val([val]);
        }
        this.select2.trigger('change');
      }
    },
    mounted: function mounted() {
      var _this = this;

      this.select2 = $(this.$el).find('select').select2(_extends({}, this.settings, {
        data: this.options
      })).on('select2:select select2:unselect', function (ev) {
        _this.$emit('change', _this.select2.val());
        _this.$emit('select', ev['params']['data']);
      });
      this.setValue(this.value);
    },
    beforeDestroy: function beforeDestroy() {
      this.select2.select2('destroy');
    }
  };

  // Import vue component

  // Declare install function executed by Vue.use()
  function install(Vue) {
    if (install.installed) return;
    install.installed = true;
    Vue.component('MyComponent', component);
  }

  // Create module definition for Vue.use()
  var plugin = {
    install: install
  };

  // Auto-install when vue is found (eg. in browser via <script> tag)
  var GlobalVue = null;
  if (typeof window !== 'undefined') {
    GlobalVue = window.Vue;
  } else if (typeof global !== 'undefined') {
    GlobalVue = global.Vue;
  }
  if (GlobalVue) {
    GlobalVue.use(plugin);
  }

  exports.install = install;
  exports.default = component;

  return exports;

}({},$));
